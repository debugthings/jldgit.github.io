<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Debug Things</title>
 <link href="http://www.debugthings.com/atom.xml" rel="self"/>
 <link href="http://www.debugthings.com/"/>
 <updated>2015-02-24T10:18:52-08:00</updated>
 <id>http://www.debugthings.com</id>
 <author>
   <name>James Davis</name>
   <email>james.l.davis@outlook.com</email>
 </author>

 
 <entry>
   <title>Visual Studio Productivity, you're doing it wrong (Ctrl+])</title>
   <link href="http://www.debugthings.com//2015/02/24/visual-studio-ctrl-bracket/"/>
   <updated>2015-02-24T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2015/02/24/visual-studio-ctrl-bracket</id>
   <content type="html">&lt;p&gt;So, I was working through an old project today and encountered a method that was about 200(!!) lines long. The code is in a dire need of refactoring and I set down the stupid path of doing so.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>I'm speaking at Orlando Code Camp</title>
   <link href="http://www.debugthings.com//2015/02/10/speaking-orlcc/"/>
   <updated>2015-02-10T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2015/02/10/speaking-orlcc</id>
   <content type="html">&lt;p&gt;I was just accepted the other day to speak at the &lt;a href=&quot;http://www.orlandocodecamp.com/&quot;&gt;Orlando Code Camp&lt;/a&gt; for my topic on OWASP Top 10 Security. This is the third time I&amp;#8217;ve delivered this presentation and I&amp;#8217;m still excited about it. Security is not overlooked by anyone today and developers who are just getting into MVC or even seasoned professionals need to take a look at how they approach it.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Slides available from South Florida Code Camp</title>
   <link href="http://www.debugthings.com//2015/02/10/slides-sflcc/"/>
   <updated>2015-02-10T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2015/02/10/slides-sflcc</id>
   <content type="html">&lt;p&gt;Thanks everyone for coming out to my two sessions at &lt;a href=&quot;http://www.fladotnet.com/codecamp/&quot;&gt;South Florida Code Camp&lt;/a&gt;, I had a great time speaking! I met some great folks out there in the community and was excited to see how many people are active in learning and keeping their skills relevant.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>I'm speaking at South Florida Code Camp</title>
   <link href="http://www.debugthings.com//2015/01/22/speaking-sflcc/"/>
   <updated>2015-01-22T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2015/01/22/speaking-sflcc</id>
   <content type="html">&lt;p&gt;I was just accepted the other day to speak at the &lt;a href=&quot;http://www.fladotnet.com/codecamp/&quot;&gt;South Florida Code Camp&lt;/a&gt; for two topics: OWASP Top 10 Security and Load Testing with Azure. This should be a great time. I feel pretty honored to be among some great leaders in the industry.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Debugging - Finding a native heap leak with WinDbg</title>
   <link href="http://www.debugthings.com//2015/01/09/debugging-heap-leaks/"/>
   <updated>2015-01-09T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2015/01/09/debugging-heap-leaks</id>
   <content type="html">&lt;p&gt;While writing the &lt;a href=&quot;https://github.com/jldgit/mysql_udf_dotnet&quot;&gt;MySQL .NET UDF Plugin&lt;/a&gt; I had to break away from my daily use of .NET. I have done a bit with Win32 COM before but not enough to know all of the ins and outs. But, as I plow through some books and bad code examples I introduce all kinds of bugs. Most notably memory leaks. I will show what leaks I found and how I fixed them using a couple of WinDbg commands as well as a few utilities.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>MySQL .NET Hosting Extension - Part 9 - Strings, _bstr_t, SafeArrays, SysAllocString, SysFreeString</title>
   <link href="http://www.debugthings.com//2015/01/08/extending-mysql-server-part9/"/>
   <updated>2015-01-08T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2015/01/08/extending-mysql-server-part9</id>
   <content type="html">&lt;p&gt;Up until now I&amp;#8217;ve been dealing with integers and reals. This is great for a lot of statistical information but we all know that databases are used for more than just storing numbers. Depending on your type of database you will most likely have a number of text items that are used to describe or othewise identify some integer value. In order to work with these values we have to marshal the data to and fro. Let&amp;#8217;s dive in to what&amp;#8217;s happening.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>MySQL .NET Hosting Extension - Part 8 - Mimicking IIS (Shadow Copy, Custom Configs)</title>
   <link href="http://www.debugthings.com//2014/12/16/extending-mysql-server-part8/"/>
   <updated>2014-12-16T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2014/12/16/extending-mysql-server-part8</id>
   <content type="html">&lt;p&gt;One of the coolest things about deploying to IIS is the shadow copy feature. This allows you to drop in a new DLL and when the application detects it, it will spin up a new AppDomain and send all new requests there. This &amp;#8220;seamless&amp;#8221; integration is great for achieving high availability. Web servers and SQL servers alike need to experience as little down time as possible. We will walk through adding shadow copy and implementing file watchers inside of the MySQLHostManager that will handle these conditions.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>MySQL .NET Hosting Extension - Part 7 - AppDomain Pools</title>
   <link href="http://www.debugthings.com//2014/12/15/extending-mysql-server-part7/"/>
   <updated>2014-12-15T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2014/12/15/extending-mysql-server-part7</id>
   <content type="html">&lt;p&gt;If we look at some of the performance metrics of the MySQL UDF extension, we&amp;#8217;re not looking great for a few items. Number one, of course, is the loading of the .NET CLR. Unfortunately unless I integrate this tool into the MySQL code itself I can&amp;#8217;t control that. The next is the loading and use of the AppDomain. That, however, I can fix.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Y U NO HAVE BUTTON?</title>
   <link href="http://www.debugthings.com//2014/12/05/y-u-no-have-button/"/>
   <updated>2014-12-05T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2014/12/05/y-u-no-have-button</id>
   <content type="html">&lt;p&gt;Seriously, it&amp;#8217;s 2014 almost 2015. I wanted to add a file type association to my machine using the provided Windows interfaces. I added an association by using the open file dialog, but realized after the fact that I wanted to give the file type a better name. A quick Google search provided a number of links asking how, but only one that told me how.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Compiling for Two (.NET versions)</title>
   <link href="http://www.debugthings.com//2014/12/03/compiling-for-two/"/>
   <updated>2014-12-03T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2014/12/03/compiling-for-two</id>
   <content type="html">&lt;p&gt;While writing the &lt;a href=&quot;https://github.com/jldgit/mysql_udf_dotnet&quot;&gt;MySQL plugin&lt;/a&gt; I found a strange need to compile two versions of my AppDomain Manager. Mainly it was for future compatibility. Plus I figured as long as my Interfaces didn&amp;#8217;t change, everything would be great. But it left me with a sucking hole in my project solution. I was going to have to maintain two versions of source code &lt;strong&gt;FOR THE EXACT SAME THING&lt;/strong&gt;. I didn&amp;#8217;t like that.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>MySQL .NET Hosting Extension - Part 6 - Supporting Side-by-Side .NET CLRs</title>
   <link href="http://www.debugthings.com//2014/12/02/extending-mysql-server-part6/"/>
   <updated>2014-12-02T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2014/12/02/extending-mysql-server-part6</id>
   <content type="html">&lt;p&gt;So far, we&amp;#8217;ve done a lot to the CLR hosting engine to properly handle type loading, type safety and custom assemblies. Now we have the task to support some desired functionality supplied with the CLR. Namely being able to support, or not support side-by-side CLR loading. We will take a look at what code changes are involved and what we can do to ensure proper loading.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>MySQL .NET Hosting Extension - Part 5 - AppDomain and Host Safety</title>
   <link href="http://www.debugthings.com//2014/11/30/extending-mysql-server-part5/"/>
   <updated>2014-11-30T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2014/11/30/extending-mysql-server-part5</id>
   <content type="html">&lt;p&gt;Now that we have a properly refactored base, and we have a good working solution to load new file from, we need to start considering safety. Not just type safety and integrity of data. No, safety of the executing code as well as the safety of the CLR host&amp;#8212;MySQL in this case. Without that we would open up our new plugin library to a lot of malicious things.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>MySQL .NET Hosting Extension - Part 4 - Extending the AppDomain Manager</title>
   <link href="http://www.debugthings.com//2014/11/26/extending-mysql-server-part4/"/>
   <updated>2014-11-26T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2014/11/26/extending-mysql-server-part4</id>
   <content type="html">&lt;p&gt;So far the application was simple and was able to load and run a command from inside of our AppDomain manager. As promised, I am extending this functionality to allow loading of any number of classes. In order to do this I made some large changes to the application. In order to keep things somewhat coherent between Parts 1, 2 and 3&amp;#8212;I branched off into a work in progress(wip) area that should make it easier to follow along.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>MySQL .NET Hosting Extension - Part 3 - Adding in the .NET Hosting API</title>
   <link href="http://www.debugthings.com//2014/11/18/extending-mysql-server-part3/"/>
   <updated>2014-11-18T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2014/11/18/extending-mysql-server-part3</id>
   <content type="html">&lt;p&gt;Now that we’ve walked through the basics of a UDF, let’s start bolting on an AppDomain Manager. As I mentioned before in &lt;a href=&quot;(/2014/11/16/extending-mysql-server-part2/)&quot;&gt;part 2&lt;/a&gt; my example is based off of the &lt;a href=&quot;http://www.microsoft.com/en-us/download/details.aspx?id=7325&quot;&gt;ADMHost&lt;/a&gt; sample provided by Microsoft. The code is used as a jump off point, but we will be extending it as these posts progress. This part of the series will focus on the insertion points rather than the actual code. That will be in the next part. For some extra information on the hosting API check out &lt;a href=&quot;http://www.amazon.com/gp/product/0735619883/&quot;&gt;Customizing the Microsoft® .NET Framework&lt;/a&gt; by &lt;a href=&quot;http://blogs.msdn.com/b/stevenpr/&quot;&gt;Steven Pratschner&lt;/a&gt;. Also check out &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms404385(v=vs.110).aspx&quot;&gt;MSDN&lt;/a&gt; for update information on the APIs.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>MySQL .NET Hosting Extension - Part 2 - UDF Deep Dive</title>
   <link href="http://www.debugthings.com//2014/11/16/extending-mysql-server-part2/"/>
   <updated>2014-11-16T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2014/11/16/extending-mysql-server-part2</id>
   <content type="html">&lt;p&gt;After I worked through compiling the sources, the next step was to get .NET hosting working at a basic level. I used source from another project called &lt;a href=&quot;http://www.microsoft.com/en-us/download/details.aspx?id=7325&quot;&gt;ADMHost&lt;/a&gt; (App Domain Manager) to base my code on. This code allows you to specify and create a managed AppDomain manager and use it to manage and run your .NET assemblies.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>MySQL .NET Hosting Extension - Part 1 - Compile Sample UDF</title>
   <link href="http://www.debugthings.com//2014/11/11/extending-mysql-server-part1/"/>
   <updated>2014-11-11T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2014/11/11/extending-mysql-server-part1</id>
   <content type="html">&lt;p&gt;So, the first thing I had to do was compile the MySQL sample UDF which is included in the source tree. While it seems like a simple thing to do with CMake and all of the proper tools installed, there are a few things not documented. The steps to compile &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.5/en/udf-compiling.html&quot;&gt;can be found here&lt;/a&gt;. The steps are really straight forward, but there is a catch. In order to build on Windows there are a few steps you will need to do in order to fully get the example working.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>MySQL .NET Hosting Extension - Part 0</title>
   <link href="http://www.debugthings.com//2014/11/11/extending-mysql-server-part0/"/>
   <updated>2014-11-11T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2014/11/11/extending-mysql-server-part0</id>
   <content type="html">&lt;p&gt;For some reason I feel compelled to write an extension for &lt;a href=&quot;http://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt; that allows use of .NET classes for functions. It&amp;#8217;s really a purely academic exercise&amp;#8212;even though I&amp;#8217;m not in school&amp;#8212;that I&amp;#8217;m using to explore the use of the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd380850(v=vs.110).aspx&quot;&gt;.NET Hosting APIs&lt;/a&gt;. I will use my blog as a way to keep myself focused and accountable. But more over it&amp;#8217;s so I don&amp;#8217;t forget what I wanted to do. I will line out a few milestones.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>First Time Speaking at OWASP Tampa</title>
   <link href="http://www.debugthings.com//2014/11/06/owasp-top-10-mvc-tampa-day-talk/"/>
   <updated>2014-11-06T00:00:00-08:00</updated>
   <id>http://www.debugthings.com/2014/11/06/owasp-top-10-mvc-tampa-day-talk</id>
   <content type="html">&lt;p&gt;A few weeks ago I submitted a talk for &lt;a href=&quot;https://www.owasp.org/index.php/Tampa&quot;&gt;OWASP Tampa Days 2014&lt;/a&gt; and I was selected.  The topic I picked to demonstrate was how MVC for .NET can solve some of the problems listed in the &lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-Top_10&quot;&gt;OWASP Top 10&lt;/a&gt;. Let me be the first to say that I was truly unprepared for what I was about to get into. This was truly an exercise in conciseness. &lt;a href=&quot;/owasp/&quot;&gt;Get the slides here&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Contributing to a Forum for 10 Days Straight</title>
   <link href="http://www.debugthings.com//2014/10/31/answering-questions/"/>
   <updated>2014-10-31T00:00:00-07:00</updated>
   <id>http://www.debugthings.com/2014/10/31/answering-questions</id>
   <content type="html">&lt;p&gt;Back in early October my company sent me to &lt;a href=&quot;http://http://compuwareperform.com/&quot;&gt;Perform 2014&lt;/a&gt;. While there, I met with some great people and found out that I&amp;#8217;m not alone. It was also very humbling. I liked that. But, with all of the meeting I found that there were a lot of people who didn&amp;#8217;t know where to turn to for help. Turns out there is a very active user community. I wanted to get involved.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Debugging - HostProtectionException in SSRS</title>
   <link href="http://www.debugthings.com//2014/10/21/hostprotectionexception-ssrs/"/>
   <updated>2014-10-21T00:00:00-07:00</updated>
   <id>http://www.debugthings.com/2014/10/21/hostprotectionexception-ssrs</id>
   <content type="html">Our BI team is currently going through an uplift from Win2k3 to Win2012. It is quite a massive undertaking of course. But, beyond the amount of work that has to be done there is another dangerous killer out there.  Undocumented changes. In this article I describe the System.Security.HostProtectionException in relation to SSRS and custom code.</content>
 </entry>
 
 <entry>
   <title>Debugging - Fixing a deadlock</title>
   <link href="http://www.debugthings.com//2014/09/24/critical-section-deadlock/"/>
   <updated>2014-09-24T00:00:00-07:00</updated>
   <id>http://www.debugthings.com/2014/09/24/critical-section-deadlock</id>
   <content type="html">&lt;p&gt;More often than not I do postmortem debugging. That is to say, I get a dump file long after the machine has experienced an issue. But, on occasion I get pulled in to take a look at problems that need to be run through the debugger. This article will show you some commands you can use to locate and fix code using WinDbg.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Bandwidth. It's not free...</title>
   <link href="http://www.debugthings.com//2014/09/23/bandwidth/"/>
   <updated>2014-09-23T00:00:00-07:00</updated>
   <id>http://www.debugthings.com/2014/09/23/bandwidth</id>
   <content type="html">&lt;p&gt;Usually when I performance test internal applications I don&amp;#8217;t consider bandwidth unless I know we&amp;#8217;re doing something irrational like transferring multi gigabyte files all the time. And even then I only consider it if we&amp;#8217;re crossing a WAN or some other &amp;#8220;slow&amp;#8221; link between sites. But, every now and then there is a project that runs over the Internet and it is very data intensive. And, a lot of that data is out of the control of the developers (images, 3rd party libraries, fonts).&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Always Performance Test!</title>
   <link href="http://www.debugthings.com//2014/09/16/always-performance-test/"/>
   <updated>2014-09-16T00:00:00-07:00</updated>
   <id>http://www.debugthings.com/2014/09/16/always-performance-test</id>
   <content type="html">&lt;p&gt;While thumbing through Twitter I ran across an &lt;a href=&quot;http://apmblog.compuware.com/2014/09/16/detecting-bad-deployments-resource-impact-response-time-hotspot-garbage-collection/&quot;&gt;article&lt;/a&gt; written by &lt;a href=&quot;https://twitter.com/grabnerandi&quot;&gt;@grabnerandi&lt;/a&gt; about a company not being able to load test a change for dependency injection. I can&amp;#8217;t tell you how many times in my job that performance testing has been brushed over for speed to market.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Writing code to write code</title>
   <link href="http://www.debugthings.com//2014/09/06/code-to-code/"/>
   <updated>2014-09-06T00:00:00-07:00</updated>
   <id>http://www.debugthings.com/2014/09/06/code-to-code</id>
   <content type="html">&lt;p&gt;Every now and then a balance needs to be struck from the every day coding of an application. While personal life is usually the topic for these types of posts, today that is not the case. Sometimes you have to write code in order to write code. This is somewhat of an extended rant from my previous post.&lt;/p&gt;

</content>
 </entry>
 

</feed>
