<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Debug Things</title>
 <link href="/atom.xml" rel="self"/>
 <link href="/"/>
 <updated>2014-11-06T20:00:27-08:00</updated>
 <id></id>
 <author>
   <name>James Davis</name>
   <email>james.l.davis@outlook.com</email>
 </author>

 
 <entry>
   <title>Contributing to a Forum for 10 Days Straight</title>
   <link href="//2014/10/31/answering-questions/"/>
   <updated>2014-10-31T00:00:00-07:00</updated>
   <id>/2014/10/31/answering-questions</id>
   <content type="html">&lt;p&gt;Back in early October my company sent me to &lt;a href=&quot;http://http://compuwareperform.com/&quot;&gt;Perform 2014&lt;/a&gt;. While there, I met with some great people and found out that I&amp;#39;m not alone. It was also very humbling. I liked that. But, with all of the meeting I found that there were a lot of people who didn&amp;#39;t know where to turn to for help. Turns out there is a very active user community. I wanted to get involved.
&amp;lt;!--more--&amp;gt;
I have always been in and out of the forums and spent most of my time seeking answers as well. Most of the answers were hard to find, or if we called support weren&amp;#39;t very easy to implement. And, sometimes, we were actually told to search there to see if someone else had seen or done what we were asking. I noticed that a lot of the questions being asked I knew the answer to. It was time to give back.&lt;/p&gt;

&lt;p&gt;So, I decided to turn on notifications for the &lt;a href=&quot;http://www.dynatrace.com/en/index.html&quot;&gt;dynatrace&lt;/a&gt; forum and started watching. Within the first two days I saw a topic I wanted to jump on. It was exciting and unnerving because I felt uneasy typing my response. I was anxious because I rarely share knowledge with people that I haven&amp;#39;t established myself with. I thought, honestly, I was going to fail.&lt;/p&gt;

&lt;p&gt;While I can&amp;#39;t say that all of my answers were correct, I did feel that I was helping. I felt a rejuvenation of the tool that I have been using the past 4 years. If anything I was moving the needle a bit for some people who may be stuck. Even if the person said, &amp;quot;Man, WTF is that guy talking about?&amp;quot; and was able to move on I &lt;/p&gt;

&lt;p&gt;There were puzzles to be solved that I have never tried, but I knew could be done. I don&amp;#39;t have any specific examples but I can say that just trying to find the most succinct solution is very satisfying. It is also, understandably, a lot of work. This work translates into knowledge, so the return is tremendous&lt;/p&gt;

&lt;p&gt;So. What have I learned?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are some people out there doing some very complex things with a very complex tool.&lt;/li&gt;
&lt;li&gt;Contrary to my personal delusions, I don&amp;#39;t know the answer to everything. &lt;/li&gt;
&lt;li&gt;People need help.&lt;/li&gt;
&lt;li&gt;A lot of people don&amp;#39;t know what they need. But one idea takes them miles.&lt;/li&gt;
&lt;li&gt;Only a few people respond back.&lt;/li&gt;
&lt;li&gt;Time between questions and answers can be a year (or more).&lt;/li&gt;
&lt;li&gt;Beware of the technical black hole. Not everyone knows the internals.&lt;/li&gt;
&lt;li&gt;Beware of those who know a lot. Like myself they often have too many answers.&lt;/li&gt;
&lt;li&gt;Patience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Will I continue? Of course. I do like it, I get asked questions all the time at work about the tool and I can always point them in the right direction. But, helping other people out with their issues broadens my view and gives me more to offer internally.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging - HostProtectionException in SSRS</title>
   <link href="//2014/10/21/hostprotectionexception-ssrs/"/>
   <updated>2014-10-21T00:00:00-07:00</updated>
   <id>/2014/10/21/hostprotectionexception-ssrs</id>
   <content type="html">&lt;h2&gt;Overview&lt;/h2&gt;

&lt;p&gt;Our BI team is currently going through an uplift from Win2k3 to Win2012. It is quite a massive undertaking of course. But, beyond the amount of work that has to be done there is another dangerous killer out there.  Undocumented changes. In this article I describe the System.Security.HostProtectionException in relation to SSRS and custom code.&lt;/p&gt;

&lt;p&gt;In this case I was working with an in-house developed bit of custom code that has been alive for &lt;strong&gt;YEARS&lt;/strong&gt;. This code is used inside of a SSRS report to render a special type of image that comes from the database.&lt;/p&gt;

&lt;p&gt;Sometime between SSRS install, v1, and vNow of this custom DLL there were numerous changes before during, and after deployment. Most of these changes are just code deployment for SSRS. But, some are a bit more insidious. There are OS level changes, patches, security updates and the like.&lt;/p&gt;

&lt;p&gt;So, it&amp;#39;s probably fair to say that the code we once had is not the code we have now. Knowing that simple--but useful--fact,  we can get right down to business.&lt;/p&gt;

&lt;h2&gt;Steps&lt;/h2&gt;

&lt;p&gt;The first thing I always do when trying to debug a &amp;quot;we&amp;#39;ve been working on it for weeks,&amp;quot; scenario is try to figure out who has been doing what. In this case we had a very skilled senior engineer working on the issue. So, I was able to forgo a ton of leg work and get down to the meat of the problem. The engineer had already compared config files, checked parameters, run numerous tests, and even added some compensating configuration changes but to no avail.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run report. Fail.&lt;/li&gt;
&lt;li&gt;Check Application Log. Clean.&lt;/li&gt;
&lt;li&gt;Check System log. Clean.&lt;/li&gt;
&lt;li&gt;Check SSRS log. Clean.&lt;/li&gt;
&lt;li&gt;Run report while watching in WinDbg. Exception.

&lt;ul&gt;
&lt;li&gt;Run the report a couple of times to correlate exceptions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Debugging&lt;/h2&gt;

&lt;p&gt;I started by attaching to the &lt;code&gt;ReportingServices.exe&lt;/code&gt; with WinDbg and continued execution. I had hoped that any messages to be displayed would show up in the console. I was in luck. As the application ran I could see CLR exceptions. &lt;/p&gt;

&lt;p&gt;Once I was able to see there was an exception I needed to see what the exception was. So I loaded up PSSCOR2 and dumped all of the exceptions using &lt;code&gt;!dae&lt;/code&gt;. With this I was able to see that there were 2 exceptions. This correlated to the number of times that I ran this particular report. An output example is below.  Note the first line of the output.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; !dae
Going to dump the .NET Exceptions found in the heap.
Loading the heap objects into our cache.

&amp;lt;&amp;lt;&amp;lt;removed topmost common exceptions&amp;gt;&amp;gt;&amp;gt;

Number of exceptions of this type:        2
Exception MethodTable: 6b8bf514
Exception object: 02a0f438
Exception type: System.Security.HostProtectionException
Message: Attempted to perform an operation that was forbidden by the CLR host.
InnerException: &amp;lt;none&amp;gt;
StackTrace (generated):
&amp;lt;none&amp;gt;
StackTraceString: &amp;lt;none&amp;gt;
HResult: 80131640
-----------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After seeing that I was able to use &lt;code&gt;!StopOnException (!soe)&lt;/code&gt; to pause the execution once we reached this particular exception. To ensure I was ready once the CLR was loaded. I did this by setting an exception(event) breakpoint by using &lt;code&gt;sxe ld mscorwks; g&lt;/code&gt;. After that I loaded PSSCOR2 with &lt;code&gt;.load exts/psccor2&lt;/code&gt;. Look at the following WinDbg log recreation below.&lt;/p&gt;

&lt;p&gt;With the command &lt;code&gt;!soe -create System.Security.HostProtectionException 1&lt;/code&gt; I created a break point on the first chance exception of this host protection exception. The &lt;code&gt;-create&lt;/code&gt; option tells &lt;code&gt;!soe&lt;/code&gt; to stop on first chance. The number &lt;code&gt;1&lt;/code&gt; is a pseudo register that you can use to check for a pass-fail condition. This is useful if you need to use ADPlus and check exactly WHAT exception was thrown &amp;quot;automagically.&amp;quot;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; There are help files in WinDbg that briefly explain ADPlus. However, you can also use procdump.exe to create dump files on specific exceptions. ADPlus gives very, very, very granular control over taking a crash dump; there is a learning curve. Procdump.exe gives great power with one command line but does not allow for complex evaluations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; sxe ld mscorwks; g
ModLoad: 6bb20000 6c0ce000   C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorwks.dll
eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=7efdd000 edi=003eeb3c
eip=77a5fc62 esp=003eea10 ebp=003eea64 iopl=0         nv up ei pl zr na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
ntdll!NtMapViewOfSection+0x12:
77a5fc62 83c404          add     esp,4
0:000&amp;gt; .load exts/psscor2
0:000&amp;gt; !soe -create System.Security.HostProtectionException 1
Breakpoint set
0:000&amp;gt; g

&amp;#39;System.Security.HostProtectionException hit&amp;#39;
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=003eddc0 ebx=e0434f4d ecx=00000001 edx=00000000 esi=003ede48 edi=0067c598
eip=75d9c42d esp=003eddc0 ebp=003ede10 iopl=0         nv up ei pl nz ac pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000216
KERNELBASE!RaiseException+0x58:
75d9c42d c9              leave

0:000&amp;gt; !CLRStack
OS Thread Id: 0x3520 (0)
ESP       EIP     
003ede98 75d9c42d [HelperMethodFrame: 003ede98] 
003edf3c 6b6ed297 System.Security.CodeAccessSecurityEngine.ThrowSecurityException(System.Reflection.Assembly, System.Security.PermissionSet, System.Security.PermissionSet, System.RuntimeMethodHandle, System.Security.Permissions.SecurityAction, System.Object, System.Security.IPermission)
003edf6c 6b6ed345 System.Security.CodeAccessSecurityEngine.ThrowSecurityException(System.Object, System.Security.PermissionSet, System.Security.PermissionSet, System.RuntimeMethodHandle, System.Security.Permissions.SecurityAction, System.Object, System.Security.IPermission)
003edf94 6b6ed4b1 System.Security.CodeAccessSecurityEngine.CheckSetHelper(System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet, System.RuntimeMethodHandle, System.Object, System.Security.Permissions.SecurityAction, Boolean)
003edfe4 6b6ed3fb System.Security.CodeAccessSecurityEngine.CheckSetHelper(System.Threading.CompressedStack, System.Security.PermissionSet, System.Security.PermissionSet, System.Security.PermissionSet, System.RuntimeMethodHandle, System.Reflection.Assembly, System.Security.Permissions.SecurityAction)
003ee194 6bb21b4c [GCFrame: 003ee194] 
003ee904 6bb21b4c [GCFrame: 003ee904] 
003ee96c 6bb21b4c [GCFrame: 003ee96c] 
003ee9bc 6bb21b4c [GCFrame: 003ee9bc] 
003eea4c 6bb21b4c [DebuggerSecurityCodeMarkFrame: 003eea4c] 
003eea20 6bb21b4c [GCFrame: 003eea20] 
003eeab8 6bb21b4c [HelperMethodFrame: 003eeab8] System.Reflection.MethodBase.PerformSecurityCheck(System.Object, System.RuntimeMethodHandle, IntPtr, UInt32)
003eeb1c 6b24f947 System.Reflection.RuntimeConstructorInfo.Invoke(System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)
003eebac 00dbb800 System.Diagnostics.TraceUtils.GetRuntimeObject(System.String, System.Type, System.String)
003eebf0 00dbb6d0 System.Diagnostics.TypedElement.BaseGetRuntimeObject()
003eec04 00dbb457 System.Diagnostics.ListenerElement.GetRuntimeObject()
003eec38 00dbb22a System.Diagnostics.ListenerElementsCollection.GetRuntimeObject()
003eec70 00dbb0a7 System.Diagnostics.TraceInternal.get_Listeners()
003eec9c 005f0369 System.Diagnostics.TraceInternal.WriteLine(System.String)
003eecd8 005f0306 System.Diagnostics.Trace.WriteLine(System.String)
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This stack trace shows us that when we call &lt;code&gt;Trace.WriteLine()&lt;/code&gt; it invokes security checks. This is all fine and well, but my code is executing as FullTrust. Right?&lt;/p&gt;

&lt;p&gt;Well, not exactly. Depending on how you use your custom code it may not execute with FullTrust. For example, if I use my code in an expression it will inherit it&amp;#39;s security from &lt;code&gt;Report_Expressions_Default_Permissions&lt;/code&gt; which is a CodeGroup with a permission set of Execution. This whacks any FullTrust you may have set on your custom code.&lt;/p&gt;

&lt;h2&gt;Explanation&lt;/h2&gt;

&lt;p&gt;The SSRS reporting engine hosts it&amp;#39;s own CLR (CLR Integration) and this is where your code will execute. As mentioned in the previous paragraph the &amp;quot;Expressions Engine&amp;quot; will take default permissions of &lt;strong&gt;Execute&lt;/strong&gt;. This causes the code to inherit the lowered security. So, in this case it will perform the security checks required to validate the CAS. Otherwise FullTrust code will cause this check to &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.security.permissions.hostprotectionattribute(v=vs.110).aspx&quot;&gt;evaporate&lt;/a&gt; and not be looked at.&lt;/p&gt;

&lt;h2&gt;Resolution&lt;/h2&gt;

&lt;p&gt;So, in this case we had the application team remove the &lt;code&gt;Trace.WriteLine()&lt;/code&gt; calls. This kept us from having to put our SSRS server in some insecure state according to this page on &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms154466&quot;&gt;SSRS Security Policies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While this explains the behavior, it does not explain why the code used to work and now it does not. While I would assume there is some change in &lt;/p&gt;

&lt;h2&gt;Side Note&lt;/h2&gt;

&lt;p&gt;I had already fixed this issue and moved on to another so I wasn&amp;#39;t able to recreate the EXACT data from the SSRS dump. I did how ever create a quick and dirty integrated host so I could recreate the issue and walk through the stack traces. You can find the code in the following repo: &lt;a href=&quot;https://github.com/jldgit/DebugThingsIntegratedCLRExample&quot;&gt;DebugThingsIntegratedCLRExample&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Debugging - Fixing a deadlock</title>
   <link href="//2014/09/24/critical-section-deadlock/"/>
   <updated>2014-09-24T00:00:00-07:00</updated>
   <id>/2014/09/24/critical-section-deadlock</id>
   <content type="html">&lt;p&gt;More often than not I do postmortem debugging. That is to say, I get a dump file long after the machine has experienced an issue. But, on occasion I get pulled in to take a look at problems that need to be run through the debugger. This article will show you some commands you can use to locate and fix code using WinDbg.&lt;/p&gt;

&lt;p&gt;While I don&amp;#39;t recommend what I am doing for an application you are delivering to production, sometimes you have to be creative when debugging. However, your hands may be tied and this set of solutions could help.&lt;/p&gt;

&lt;p&gt;For this article I am making an assumption you have a working knowledge of WinDbg. As well I suspect you should have working knowledge of C or C++. And also, of Win32. Do I even need to mention the stack?&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t know them I&amp;#39;d check out the following links.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/hardware/hh406283(v=vs.85).aspx&quot;&gt;Debugging Using WinDbg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms235629.aspx&quot;&gt;Walkthrough: Creating a Win32 Console Program (C++)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms682516(v=vs.85).aspx&quot;&gt;Creating Threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/ms682530(v=vs.85).aspx&quot;&gt;Critical Section Objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you know everything there is to know about Win32 programming and WinDbg, lets get started. :)&lt;/p&gt;

&lt;h2&gt;The Application&lt;/h2&gt;

&lt;p&gt;The application that is being used is a contrived example that demonstrates a deadlock in the purest sense. One application, two threads, two locks out of order.&lt;/p&gt;

&lt;p&gt;The repository for the code &lt;a href=&quot;https://github.com/jldgit/DebugThingsCode&quot;&gt;is here&lt;/a&gt;, and is displayed below.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_tmain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_TCHAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hStdOut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetStdHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STD_OUTPUT_HANDLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;InitializeCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;InitializeCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tid1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tid2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WaitForMultipleObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INFINITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WINAPI&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;Thread1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EnterCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Artificial do work&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EnterCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SetConsoleTextAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hStdOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOREGROUND_RED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Thread 1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LeaveCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LeaveCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WINAPI&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;Thread2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EnterCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Artificial do work&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EnterCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;SetConsoleTextAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hStdOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOREGROUND_BLUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; Thread 2&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LeaveCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LeaveCriticalSection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cs2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;In this example the problem is simply the locks are out of order. The fix is simple if you have the source code.  Have the locks fire in order and your problems will go away.&lt;/p&gt;

&lt;p&gt;But, what if you don&amp;#39;t have the code? What do you do then? What if the code is critical and just started doing this because of a change in load or a change in the operating system, or ... the list goes on and on.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s not often you will encounter this, but you just might.&lt;/p&gt;

&lt;h2&gt;The Solution Overview&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;WinDbg!&lt;/strong&gt; The worlds most loved and hated tool of developers. The pro tool. The last line of defense. When all hope is lost, use WinDbg.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; I recommend running all of your C++ code through WinDbg. But, There is no better way to step through your code and get all of the information you need with one tool. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to fix this problem we need to do the following steps. These steps would take a minute or two in Visual Studio; and once you get to be proficient at WinDbg, it could be just as fast.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Identify the threads being created&lt;/li&gt;
&lt;li&gt;Identify the locking pattern&lt;/li&gt;
&lt;li&gt;Locate the locks&lt;/li&gt;
&lt;li&gt;Change the order in which the locks are executed&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;The Solution Details&lt;/h2&gt;

&lt;p&gt;From here on out I will make some assumptions about your familiarity with the tool and concepts. I may simply state: &amp;quot;Open the executable in WinDbg,&amp;quot; and expect you to know what I mean.&lt;/p&gt;

&lt;h3&gt;Step 1 - Start the application&lt;/h3&gt;

&lt;p&gt;Open the CriticalSectionDeadlock executable in WinDbg... &lt;/p&gt;

&lt;h3&gt;Step 2 - Let it load&lt;/h3&gt;

&lt;p&gt;Type g in the command line until the command line says &lt;code&gt;Debugee is running...&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Step 3 - Inspect threads&lt;/h3&gt;

&lt;p&gt;The application should be in a failed state. We will break into the application by typing &lt;code&gt;Ctrl+Break&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, type &lt;code&gt;~&lt;/code&gt; to view the active threads. You should see a screen that resembles this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:003&amp;gt; ~
   0  Id: 1618.1570 Suspend: 1 Teb: 7efdd000 Unfrozen
   1  Id: 1618.18fc Suspend: 1 Teb: 7efda000 Unfrozen
   2  Id: 1618.bc8 Suspend: 1 Teb: 7efd7000 Unfrozen
.  3  Id: 1618.1bd0 Suspend: 1 Teb: 7efaf000 Unfrozen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The period(.) next to the Thread Number lets you know that this is the thread you are currently inspecting.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; type &lt;code&gt;.hh ~&lt;/code&gt; to view the help file for the thread syntax command. You can use &lt;code&gt;.hh&lt;/code&gt; for every single command that you use with WinDbg, save for some of the custom extensions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we can see we have three threads (and one debug thread) we should take a look at what each one is doing. First lest switch to &lt;strong&gt;Thread 1&lt;/strong&gt;. The syntax of the command is &lt;code&gt;~1s&lt;/code&gt;. We can then inspect the call stack using &lt;code&gt;k&lt;/code&gt; to output the methods only or &lt;code&gt;kbn&lt;/code&gt; to display the frame numbers, method name, and the first three arguments. I added the line breaks to make it easier to read.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:001&amp;gt; ~1s
eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=01164450 edi=00000000
eip=77dcf8d1 esp=006df7d8 ebp=006df83c iopl=0         nv up ei pl zr na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
ntdll!ZwWaitForSingleObject+0x15:
77dcf8d1 83c404          add     esp,4

0:001&amp;gt; k
ChildEBP RetAddr  
006df7d8 77de8e44 ntdll!ZwWaitForSingleObject+0x15
006df83c 77de8d28 ntdll!RtlpWaitOnCriticalSection+0x13e
006df864 011610ea ntdll!RtlEnterCriticalSection+0x150
006df880 765b338a CriticalSectionDeadlock!Thread1+0x2a 
006df88c 77de9f72 kernel32!BaseThreadInitThunk+0xe
006df8cc 77de9f45 ntdll!__RtlUserThreadStart+0x70
006df8e4 00000000 ntdll!_RtlUserThreadStart+0x1b

0:001&amp;gt; kbn
 # ChildEBP RetAddr  Args to Child              
00 006df7d8 77de8e44 0000003c 00000000 00000000 ntdll!ZwWaitForSingleObject+0x15

01 006df83c 77de8d28 00000000 00000000 765b10ff ntdll!RtlpWaitOnCriticalSection+0x13e

02 006df864 011610ea 01164450 00000000 00000000 ntdll!RtlEnterCriticalSection+0x150

03 006df880 765b338a 00000000 006df8cc 77de9f72 CriticalSectionDeadlock!Thread1+0x2a 

04 006df88c 77de9f72 00000000 776a58cd 00000000 kernel32!BaseThreadInitThunk+0xe

05 006df8cc 77de9f45 011610c0 00000000 00000000 ntdll!__RtlUserThreadStart+0x70

06 006df8e4 00000000 011610c0 00000000 00000000 ntdll!_RtlUserThreadStart+0x1b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you look at frame 02, you can see that we are entering a critical section. Let&amp;#39;s see if there is anything else going on. We will take a look at &lt;strong&gt;Thread 2&lt;/strong&gt; this time.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:002&amp;gt; ~2kbn
 # ChildEBP RetAddr  Args to Child              
00 00b3f970 77de8e44 00000040 00000000 00000000 ntdll!ZwWaitForSingleObject+0x15

01 00b3f9d4 77de8d28 00000000 00000000 765b10ff ntdll!RtlpWaitOnCriticalSection+0x13e

02 00b3f9fc 0116117a 01164438 00000000 00000000 ntdll!RtlEnterCriticalSection+0x150

03 00b3fa18 765b338a 00000000 00b3fa64 77de9f72 CriticalSectionDeadlock!Thread2+0x2a

04 00b3fa24 77de9f72 00000000 77b45a65 00000000 kernel32!BaseThreadInitThunk+0xe

05 00b3fa64 77de9f45 01161150 00000000 00000000 ntdll!__RtlUserThreadStart+0x70

06 00b3fa7c 00000000 01161150 00000000 00000000 ntdll!_RtlUserThreadStart+0x1b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; Use the shortcut command &lt;code&gt;~2kbn&lt;/code&gt; which executes the &lt;code&gt;kbn&lt;/code&gt; command without switching to thread 2.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we look at this thread stack we can see that we also are entering a critical section. At the very top of the stack we can see the &lt;code&gt;ZwWaitForSingleObject()&lt;/code&gt; method, this tells me that we&amp;#39;re blocked waiting for this particular CS. Lets take a look at the data behind the CS and find out why.&lt;/p&gt;

&lt;h3&gt;Step 4 - Inspect CRITICAL_SECTION(s)&lt;/h3&gt;

&lt;p&gt;In the previous step we looked at the call stacks of the deadlocked threads. Judging from those call stacks we know that we are entering a critical section and we are waiting on something. But what are we waiting on?&lt;/p&gt;

&lt;p&gt;In order to synchronize the critical sections Windows needs to be able to signal to other threads when it becomes available. In order to do this it uses a reset event. Let&amp;#39;s take a look at the &lt;code&gt;ZwWaitForSingleObject()&lt;/code&gt; parameters on &lt;strong&gt;Thread 2&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:001&amp;gt; ~2kbn 1
 # ChildEBP RetAddr  Args to Child              
00 00b3f970 77de8e44 00000040 00000000 00000000 ntdll!ZwWaitForSingleObject+0x15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method is waiting on a handle (&lt;code&gt;40&lt;/code&gt;). Let&amp;#39;s take a look at the handle in the parameter by using the &lt;code&gt;!handle&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:001&amp;gt; !handle 40
Handle 40
  Type          Event

0:001&amp;gt; !handle 40 f
Handle 40
  Type          Event
  Attributes    0
  GrantedAccess 0x100003:
         Synch
         QueryState,ModifyState
  HandleCount   2
  PointerCount  4
  Name          &amp;lt;none&amp;gt;
  Object Specific Information
    Event Type Auto Reset
    Event is Waiting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that this handle is an auto reset event, but for what? We know that we are waiting on a critical section, let&amp;#39;s confirm it&amp;#39;s relationship. Let&amp;#39;s inspect the critical section using the &lt;code&gt;!cs&lt;/code&gt; command, with the parameter from the &lt;code&gt;RtlEnterCriticalSection()&lt;/code&gt; function in frame 02 (&lt;code&gt;01164438&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:002&amp;gt; !cs 01164438 
-----------------------------------------
Critical section   = 0x01164438 (CriticalSectionDeadlock!cs2+0x0)
DebugInfo          = 0x0079a1b0
LOCKED
LockCount          = 0x1
WaiterWoken        = No
OwningThread       = 0x000018fc
RecursionCount     = 0x1
LockSemaphore      = 0x40
SpinCount          = 0x00000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that we are indeed waiting on this critical section&amp;#39;s lock semaphore (auto reset event). But, if the other thread is trying to enter a different critical section, why are we blocked? This is because this critical section is already LOCKED, as indicated by the &lt;code&gt;!cs&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;In fact, it is locked by thread &lt;code&gt;0x18fc&lt;/code&gt;, let&amp;#39;s find out who that is. Use the &lt;code&gt;~~[TID]&lt;/code&gt; command for this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:001&amp;gt; ~~[0x18fc]
.  1  Id: 1618.18fc Suspend: 1 Teb: 7efda000 Unfrozen
      Start: CriticalSectionDeadlock!Thread1 (011610c0)
      Priority: 0  Priority class: 32  Affinity: ff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Look at that. It is &lt;strong&gt;Thread 1&lt;/strong&gt;. But, we don&amp;#39;t see the call to that critical section in the call stack.  We can only assume that the call has came and went. Let&amp;#39;s find out how these calls are made inside of the &lt;code&gt;Thread1()&lt;/code&gt; and &lt;code&gt;Thread2()&lt;/code&gt; functions. We will need to take a look at the disassembly of the &lt;code&gt;Thread2()&lt;/code&gt; function located at stack frame 03 for &lt;strong&gt;Thread 2&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Step 5 - Inspect the code&lt;/h3&gt;

&lt;p&gt;Now that we&amp;#39;re certain we have a blocked thread we need to take a look at the functions that are part of this executable. In order to do that we will use the un-assemble &lt;code&gt;u&lt;/code&gt; command, and use the &lt;code&gt;uf&lt;/code&gt; variant to un-assemble a function. I added line breaks to make some lines easier to read.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span class=&quot;c&quot;&gt;# CriticalSectionDeadlock!Thread2:&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;esp&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FFFFFFF8h&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;ebp&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;ecx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp__Sleep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;esi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;edi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp__EnterCriticalSection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;esi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# CriticalSectionDeadlock!Thread2+0x18:&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;cs1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01164450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;edi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;cs2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01164438&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;edi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;hStdOut&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01164468&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp__SetConsoleTextAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;char_traits&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01161420&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;ecx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;coutstd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;esi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;esi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;??&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;$basic_ostreamDU&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;$char_traitsDstdstdQAEAAV01HZ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163064&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!`&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;011631&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;char_traits&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;011611&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;e0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;??&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;$basic_ostreamDU&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;$char_traitsDstdstdQAEAAV01P6AAAV01AAV01ZZ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163068&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FAh&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;cs1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01164450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp__LeaveCriticalSection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0116301&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;cs2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01164438&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp__LeaveCriticalSection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0116301&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Thread2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0x18&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01161168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I won&amp;#39;t walk this code line by line, but I will point out some interesting parts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Storing the EnterCriticalSection function pointer in $edi&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp__EnterCriticalSection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Calls to $edi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We first &lt;code&gt;push&lt;/code&gt; the critical section to the stack and then call the function located at $edi. The addresses to the left are important.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;cs1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01164450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;edi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;cs2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01164438&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;edi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These two parts of the code are critical to understanding the code flow and how we will go about editing the application to get it to work.&lt;/p&gt;

&lt;p&gt;What we need to do now is locate this function in memory and edit the &lt;code&gt;push&lt;/code&gt; instruction to push the proper instructions.&lt;/p&gt;

&lt;h3&gt;Step 6 - Edit the code&lt;/h3&gt;

&lt;p&gt;First a little background on x86 architecture and what we are looking at here. The Intel x86 architecture uses &lt;a href=&quot;http://en.wikipedia.org/wiki/Endianness&quot;&gt;little endian&lt;/a&gt; byte order. So, instead of looking at a WORD starting at 0x00 and ending at 0x01 in order from left to right, it would be reversed.&lt;/p&gt;

&lt;p&gt;So, 0XDEAD would be represented in memory as it is show, but would be 0xADDE when passed to the instruction.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s look at the instruction at address &lt;code&gt;0x01161168&lt;/code&gt; in the &lt;code&gt;Thread2()&lt;/code&gt; function. We will use the display memory &lt;code&gt;d&lt;/code&gt; command to do so.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Size of Pointers
0:002&amp;gt; dp 0x01161168 L 4
01161168  16445068 6ad7ff01 68d3ff05 01164438

Size of Words
0:002&amp;gt; dw 0x01161168 L 4
01161168  5068 1644 ff01 6ad7

Size of Bytes
0:002&amp;gt; db 0x01161168 L 5
01161168  68 50 44 16 01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that I specified length using L. Pay attention to the last command when I displayed the bytes and notice I specified the number 5. Why?&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;push&lt;/code&gt; instruction on x86 is represented by one byte (&lt;code&gt;0x68&lt;/code&gt;) plus four bytes for the address (&lt;code&gt;0x01164450&lt;/code&gt;). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Notice how the bytes aren&amp;#39;t really in an order you expect to see them? The reason for this is they a normal address is a double word and would have to be aligned on a word boundary to be displayed properly.&lt;/p&gt;

&lt;p&gt;Since instructions can (and usually are) odd sizes the code ends up misaligned. This is okay because the real issue is getting a code segment to fit into a cache line to be run by the processor. In most cases your entire function code block is aligned on a proper boundary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since our main code defined the two critical sections directly next to each other the compiler gave them sequential addresses (plus the size of the object).  In reality it doesn&amp;#39;t always behave this way, but this sample application happens to.&lt;/p&gt;

&lt;p&gt;Now all we need to do is edit the proper byte in the function instruction to swap the order of the calling sequence. We can do this by using the edit memory &lt;code&gt;e&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The instruction addresses I&amp;#39;m concerned with are the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;EnterCriticalSection order:
01161168 6850441601      push    offset CriticalSectionDeadlock!cs1 (01164450)
01161173 6838441601      push    offset CriticalSectionDeadlock!cs2 (01164438)

LeaveCriticalSection order:
011611ba 6850441601      push    offset CriticalSectionDeadlock!cs1 (01164450)
011611c5 6838441601      push    offset CriticalSectionDeadlock!cs2 (01164438)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The actual edit command. &lt;em&gt;I will repeat this for each of the addresses substituting the proper byte.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Before:
0:002&amp;gt; db 0x01161168+0x1 L 1
01161169  50 

After:
0:002&amp;gt; eb 0x01161168+0x1 38
0:002&amp;gt; db 0x01161168+0x1 L 1
01161169  38  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt; Do not edit more than you need to. In the previous example the instructions only differed by 1 byte.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is the resulting assembly.  Look for the code at the addresses we&amp;#39;ve changed and you will see the order of the locks has changed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span class=&quot;nf&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Thread2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;ebp&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;ebp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;esp&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FFFFFFF8h&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;ecx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;ebx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp__Sleep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;esi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;edi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp__EnterCriticalSection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;esi&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Thread2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0x18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;cs2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01164438&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;edi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;cs1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01164450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;edi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;hStdOut&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01164468&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp__SetConsoleTextAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;char_traits&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01161420&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;ecx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;coutstd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;esi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;esi&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;??&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;$basic_ostreamDU&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;$char_traitsDstdstdQAEAAV01HZ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163064&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!`&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;011631&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;char_traits&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;011611&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;e0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;esp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;eax&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;??&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;$basic_ostreamDU&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;$char_traitsDstdstdQAEAAV01P6AAAV01AAV01ZZ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01163068&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FAh&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;ebx&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;cs2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01164438&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp__LeaveCriticalSection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0116301&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;cs1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01164450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;    &lt;span class=&quot;no&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;_imp__LeaveCriticalSection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0116301&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt;     &lt;span class=&quot;no&quot;&gt;CriticalSectionDeadlock&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Thread2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0x18&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01161168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Step 7 - Run it!&lt;/h3&gt;

&lt;p&gt;Go on, hit g. Let your code run! GO ON.&lt;/p&gt;

&lt;p&gt;Did you do it? Why isn&amp;#39;t it running?&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t forget, you&amp;#39;re still in a wait state. We have to clear that. But, how?&lt;/p&gt;

&lt;p&gt;Before the application makes the first call into the thread functions you can over write them and test to see if the fix works. There is not much you need to do here.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Launch WinDbg and run executable&lt;/li&gt;
&lt;li&gt;Wait for WinDbg to break before loading file (first break)&lt;/li&gt;
&lt;li&gt;Load executable with &lt;code&gt;ld&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;Patch the function&lt;/li&gt;
&lt;li&gt;Run&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; There is another way to do this that involves using the &lt;code&gt;.call&lt;/code&gt; command. In order to use it you need proper symbols so you can execute the function. WinDbg needs the function prototype for this to work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Step 8 - Patching the executable&lt;/h3&gt;

&lt;p&gt;This step is not for the faint of heart, but I will describe it anyway.&lt;/p&gt;

&lt;p&gt;So, you can&amp;#39;t just dump an executable from memory. By the time it is loaded Windows has fixed up your imports and exports, translated all of your RVAs and loaded the file into properly aligned memory sections.&lt;/p&gt;

&lt;p&gt;The result is code that will execute if loaded into a process at the exact same address as you dumped it. Not likely. In fact, if you attempted to dump the file with the same exact length you will get a partial file.&lt;/p&gt;

&lt;p&gt;What you need to do is patch the executable before it gets translated. There are some decent tools out there that allow you to save a patched version of an executable as you are debugging it. &lt;a href=&quot;http://www.ollydbg.de/&quot;&gt;OllyDbg&lt;/a&gt; comes to mind.&lt;/p&gt;

&lt;p&gt;We can do this in WinDbg. It just takes some finesse. &lt;/p&gt;

&lt;h3&gt;Step 8.1 - Finding the RVA and file location&lt;/h3&gt;

&lt;p&gt;I&amp;#39;d say the first real step is finding the location of the function inside of the actual executable file. In order to do this I will use &lt;code&gt;DUMPBIN&lt;/code&gt; which can be found in the Visual Studio Tools package.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You will also want to get the RVA of the critical sections.  We won&amp;#39;t be dumping any information about them, but it will help in step 7.2.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To locate the RVA of &lt;strong&gt;Thread2&lt;/strong&gt; run the following, the output is below:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;dumpbin /relocations CriticalSectionDeadlock.exe | findstr /i Thread2


87  HIGHLOW            00401150  ?Thread2@@YGKPAX@Z (unsigned long __stdcall Thread2(void *))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make note of the address 00401150. Your address &lt;strong&gt;could&lt;/strong&gt; be different, but it is not likely because that is the standard base address for PE32 files. You can rebase your images if you want, but that is a different topic.&lt;/p&gt;

&lt;p&gt;To locate the RVA of the &lt;strong&gt;critical sections&lt;/strong&gt; type the following, the output is below:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;dumpbin /relocations CriticalSectionDeadlock.exe | findstr /i cs.@


      51  HIGHLOW            00404450  ?cs1@@3U_RTL_CRITICAL_SECTION@@A (struct
_RTL_CRITICAL_SECTION cs1)
      5D  HIGHLOW            00404438  ?cs2@@3U_RTL_CRITICAL_SECTION@@A (struct
_RTL_CRITICAL_SECTION cs2)
      D9  HIGHLOW            00404438  ?cs2@@3U_RTL_CRITICAL_SECTION@@A (struct
_RTL_CRITICAL_SECTION cs2)
      E4  HIGHLOW            00404450  ?cs1@@3U_RTL_CRITICAL_SECTION@@A (struct
_RTL_CRITICAL_SECTION cs1)
     12B  HIGHLOW            00404438  ?cs2@@3U_RTL_CRITICAL_SECTION@@A (struct
_RTL_CRITICAL_SECTION cs2)
     136  HIGHLOW            00404450  ?cs1@@3U_RTL_CRITICAL_SECTION@@A (struct
_RTL_CRITICAL_SECTION cs1)
     169  HIGHLOW            00404450  ?cs1@@3U_RTL_CRITICAL_SECTION@@A (struct
_RTL_CRITICAL_SECTION cs1)
     174  HIGHLOW            00404438  ?cs2@@3U_RTL_CRITICAL_SECTION@@A (struct
_RTL_CRITICAL_SECTION cs2)
     1BB  HIGHLOW            00404450  ?cs1@@3U_RTL_CRITICAL_SECTION@@A (struct
_RTL_CRITICAL_SECTION cs1)
     1C6  HIGHLOW            00404438  ?cs2@@3U_RTL_CRITICAL_SECTION@@A (struct
_RTL_CRITICAL_SECTION cs2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make note of the addresses 00404450 and 00404438. Your address &lt;strong&gt;could&lt;/strong&gt; be different.&lt;/p&gt;

&lt;p&gt;Once you have your RVA location for the &lt;code&gt;Thread2()&lt;/code&gt; function we can find the location it should be in the actual file. Run the following command to work it out.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;dumpbin CriticalSectionDeadlock.exe /headers

Which outputs:

Microsoft (R) COFF/PE Dumper Version 12.00.30723.0
Copyright (C) Microsoft Corporation.  All rights reserved.


Dump of file CriticalSectionDeadlock.exe

PE signature found

File Type: EXECUTABLE IMAGE

FILE HEADER VALUES
             14C machine (x86)
               5 number of sections
        542317A3 time date stamp Wed Sep 24 15:12:35 2014
               0 file pointer to symbol table
               0 number of symbols
              E0 size of optional header
             102 characteristics
                   Executable
                   32 bit word machine

OPTIONAL HEADER VALUES
             10B magic # (PE32)
           12.00 linker version
            1600 size of code
            1C00 size of initialized data
               0 size of uninitialized data
            1F0B entry point (00401F0B) _wmainCRTStartup
            1000 base of code
            3000 base of data
          400000 image base (00400000 to 00406FFF)
            1000 section alignment
             200 file alignment

... removed for brevity ...

SECTION HEADER #1
   .text name
    153B virtual size
    1000 virtual address (00401000 to 0040253A)
    1600 size of raw data
     400 file pointer to raw data (00000400 to 000019FF)
       0 file pointer to relocation table
       0 file pointer to line numbers
       0 number of relocations
       0 number of line numbers
60000020 flags
         Code
         Execute Read

... removed for brevity ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command outputs the RVA (virtual address) starting point and it also gives us the file pointer. We can use this to work out the actual location of the function inside of the file. This will be critical for the next step.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  RVA of function:      00401150
- Image Base:           00400000
- VA Starting Address:  00001000
+ File Pointer Offset:  00000400
--------------------------------
Location in file:       00000550
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The location of the start of &lt;code&gt;Thread2()&lt;/code&gt; in the executable is &lt;strong&gt;0x500&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Step 8.2 - Loading the file into WinDbg&lt;/h3&gt;

&lt;p&gt;Now that we have the file offset, we need to load it into WinDbg to alter the code. The assembly will look a bit different but you will get it once you see it.&lt;/p&gt;

&lt;p&gt;In order to load the file into WinDbg you need to allocate space with &lt;code&gt;.dvalloc&lt;/code&gt; and then you need to read the file into memory using &lt;code&gt;.readmem&lt;/code&gt;. Once it&amp;#39;s loaded you can use &lt;code&gt;uf&lt;/code&gt; to inspect the function.&lt;/p&gt;

&lt;p&gt;Please note the address returned by &lt;code&gt;.dvalloc&lt;/code&gt; can be different depending on a few factors. Mind the address that is returned by this command. Also note that the radix for these commands is 16, so all of the numbers are in hex.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; .dvalloc 0n13000
Allocated 4000 bytes starting at 000f0000

0:000&amp;gt; .readmem ..\..\CriticalSectionDeadlock2.exe 0xf0000 L 0n12800
Reading 3200 bytes.......

0:000&amp;gt; uf 0xf0000+0x550
000f0550 55              push    ebp
000f0551 8bec            mov     ebp,esp
000f0553 83e4f8          and     esp,0FFFFFFF8h
000f0556 51              push    ecx
000f0557 53              push    ebx
000f0558 8b1d14304000    mov     ebx,dword ptr ds:[403014h]
000f055e 56              push    esi
000f055f 57              push    edi
000f0560 8b3d10304000    mov     edi,dword ptr ds:[403010h]
000f0566 33f6            xor     esi,esi

000f0568 6850444000      push    404450h
000f056d ffd7            call    edi
000f056f 6a05            push    5
000f0571 ffd3            call    ebx
000f0573 6838444000      push    404438h
000f0578 ffd7            call    edi
000f057a 6a02            push    2
000f057c ff3568444000    push    dword ptr ds:[404468h]
000f0582 ff1518304000    call    dword ptr ds:[403018h]
000f0588 6820144000      push    401420h
000f058d 51              push    ecx
000f058e 8b0d80304000    mov     ecx,dword ptr ds:[403080h]
000f0594 46              inc     esi
000f0595 56              push    esi
000f0596 ff1564304000    call    dword ptr ds:[403064h]
000f059c baa4314000      mov     edx,4031A4h
000f05a1 8bc8            mov     ecx,eax
000f05a3 e838000000      call    000f05e0
000f05a8 83c404          add     esp,4
000f05ab 8bc8            mov     ecx,eax
000f05ad ff1568304000    call    dword ptr ds:[403068h]
000f05b3 68fa000000      push    0FAh
000f05b8 ffd3            call    ebx
000f05ba 6850444000      push    404450h
000f05bf ff151c304000    call    dword ptr ds:[40301Ch]
000f05c5 6838444000      push    404438h
000f05ca ff151c304000    call    dword ptr ds:[40301Ch]
000f05d0 eb96            jmp     000f0568
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will notice this disassembly looks close to the disassembly in previous steps. However, none of the symbols are resolved. That&amp;#39;s because this file isn&amp;#39;t actually loaded, it is just resident in memory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using Steps 5, 6 and 7 you can write the proper bytes to the function as you did before while debugging it.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Step 8.3 - Writing the file to disk&lt;/h3&gt;

&lt;p&gt;We&amp;#39;re in the home stretch. If you&amp;#39;ve made it this far, you&amp;#39;re an animal. After we&amp;#39;ve deduced all of the information we need to about the file and corrected the bug, we need to save the file.&lt;/p&gt;

&lt;p&gt;To do this we will use the &lt;code&gt;.witemem&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0:000&amp;gt; .writemem c:\temp\fixedfile.exe 0xf0000 L 0n12800
Writing 3200 bytes.......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thats it! &lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This article series showed us how to work with the debugger, fix a bug, and then patch an executable all without using the source code or Visual Studio.&lt;/p&gt;

&lt;p&gt;As I said before WinDbg is a powerful tool with a steep learning curve. But, once you get inside and poke around, it&amp;#39;s not so bad. I hope you found this article helpful. Leave me a tweet &lt;a href=&quot;https://twitter.com/debugthings&quot;&gt;@debugthings&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bandwidth. It's not free...</title>
   <link href="//2014/09/23/bandwidth/"/>
   <updated>2014-09-23T00:00:00-07:00</updated>
   <id>/2014/09/23/bandwidth</id>
   <content type="html">&lt;p&gt;Usually when I performance test internal applications I don&amp;#39;t consider bandwidth unless I know we&amp;#39;re doing something irrational like transferring multi gigabyte files all the time. And even then I only consider it if we&amp;#39;re crossing a WAN or some other &amp;quot;slow&amp;quot; link between sites. But, every now and then there is a project that runs over the Internet and it is very data intensive. And, a lot of that data is out of the control of the developers (images, 3rd party libraries, fonts). &lt;/p&gt;

&lt;p&gt;It&amp;#39;s a given that it will cost you money, but how much? A dedicated link can run anywhere from $100 a month on a broadband backbone, all the way up to $50,000 for Gbit Level3 Fiber. How much money you want to spend on your connection depends on the amount of content you need to control.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You may find that if you do some tuning on bandwidth you can save your self hundreds of thousands of dollars per year.&lt;/strong&gt; You read that right, &lt;strong&gt;hundreds of thousands of dollars&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Background&lt;/h3&gt;

&lt;p&gt;Recently I was working on a launch of a new website and the main concern was hitting our requests per second target for daily use and what a holiday spike would look like. This is how things normally go. It&amp;#39;s easy. You drive load into the system until it eventually cracks. You suggest a fix. It gets implemented. Repeat.&lt;/p&gt;

&lt;p&gt;So, here we are about 3 weeks out from our go-live date. We spent months on tuning the system to run as lean as possible. We turned logging down. Compression on. SSL offloading. SQL tuning. Everything. We were ready.&lt;/p&gt;

&lt;p&gt;Yet, while doing all of this there wasn&amp;#39;t much visual content on the site. It wasn&amp;#39;t until this point in the project that &amp;quot;real&amp;quot; images and verbiage were coming in. When it did our bandwidth consumption jumped considerably. I don&amp;#39;t mean 2 times; 10 times. &lt;strong&gt;TEN TIMES&lt;/strong&gt;. We had to find out just how much data we were pushing, and we needed to know what it looked like from outside of the datacenter.&lt;/p&gt;

&lt;h3&gt;Bandwidth Estimation&lt;/h3&gt;

&lt;p&gt;Before we start running load tests willy nilly out on the open internet we need to do some math. Not hard math, but some fuzzy math to calculate our potential load. I will give some examples with a common website.&lt;/p&gt;

&lt;p&gt;For this I always use &lt;a href=&quot;http://www.telerik.com/fiddler&quot;&gt;Fiddler&lt;/a&gt;. There are some great plugins that will help you determine impact of change as well. Here is an &lt;a href=&quot;http://www.telerik.com/fiddler/web-app-performance-testing&quot;&gt;overview&lt;/a&gt; of what it can provide. These next few sections assume you&amp;#39;re somewhat familiar with Fiddler. I will include a few small steps but nothing in-depth. This isn&amp;#39;t a Fiddler tutorial.&lt;/p&gt;

&lt;p&gt;When we first navigate to &lt;a href=&quot;http://www.microsoft.com/&quot;&gt;www.microsoft.com&lt;/a&gt; we will see the total amount of requests that are sent over. We can see this by selecting all of the requests that make up a page. In this case the home page. I have trimmed off some extra data for brevity.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Request Count:   51
Unique Hosts:    14
Bytes Sent:      36,471     (headers:36,471; body:0)
Bytes Received:  884,345    (headers:27,698; body:856,647)

ACTUAL PERFORMANCE
--------------
Requests started at:        16:34:22.077
Responses completed at:     16:34:25.057
Sequence (clock) duration:  00:00:02.9801705
Aggregate Session duration: 00:00:06.823
DNS Lookup time:            1,295ms
TCP/IP Connect duration:    1,181ms

.. response codes snipped ...

RESPONSE BYTES (by Content-Type)
--------------
               image/jpg: 382,186
application/x-javascript: 184,279
application/octet-stream: 86,289
               image/png: 70,863
         text/javascript: 66,832
               text/html: 40,260
               ~headers~: 27,698
                text/css: 19,181
               image/gif: 6,757

... hosts and timing estimates removed ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For my purposes a very important line was needed. In particular the amount of bytes. More over we need to convert this to bits.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Bytes Received:  884,345        (headers:27,698; body:856,647)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Armed with this information I could start calculating some of this fuzzy math. I knew that if we had 100Mbit of bandwidth and the majority of our users would get &lt;strong&gt;about&lt;/strong&gt; the same speed then we can use this formula going forward. This generates a theoretical maximum.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;((Bytes Received) * 8) / (Sequence (clock) duration) = effective bandwidth

(884,345B * 8b) / 2.98s = 2,374,080 = 2.4Mbit/sec

100Mbit/sec / 2.4Mbit/sec = 42 THEORETICAL simultaneous NEW page transfers in 3 seconds (14/sec)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In reality we more than likely won&amp;#39;t be able to hit 42. If we kind of squint our eyes and do some estimating we will need to reduce the number of actual page transfers. I always use the 80% rule. So really we could do about 34 new page loads at one time and be safe.&lt;/p&gt;

&lt;p&gt;Great. We have a number to shoot for. We&amp;#39;re done right? Well, no. If you went to your management and said, we can handle 34 pages per second, you might get a sideways look and be asked to explain.&lt;/p&gt;

&lt;p&gt;It may be more helpful to aggregate into minutes and even further translate that to users or sessions per minute. As you fuzz your numbers it may help make the overall point. Regardless of how fast the end user is there is a finite maximum number of pages that can be delivered in a finite amount of time.&lt;/p&gt;

&lt;p&gt;So, what do you do next? &lt;/p&gt;

&lt;h3&gt;Deep Estimation&lt;/h3&gt;

&lt;p&gt;Once you have done your naive estimation, you need to follow up and employ due diligence. Try and flow through the heaviest use cases and do the same math. If there aren&amp;#39;t any cases yet, make it up! Remember that what ever your QA team can&amp;#39;t find a user will find the first time.&lt;/p&gt;

&lt;p&gt;I believe that you have the same abilities. You, dear reader, can behave just like a user. Because, lets face it, you are a user deep in your soul. You order from Amazon, you poke around Ebay, you Google things wrong from time to time. Use this power. Embrace it. Go.&lt;/p&gt;

&lt;p&gt;Once you identify the pages, the transfer times, and estimated mixtures you can stop right? No. You need to go a step further and start estimating your return users and how that will affect caching. You are caching aren&amp;#39;t you?&lt;/p&gt;

&lt;h3&gt;Caching Estimation&lt;/h3&gt;

&lt;p&gt;Ah, yes. If you forgot, most modern browsers will adhere to caching rules. You need to use this to your advantage. Especially if you have some idea of how many users will be return.&lt;/p&gt;

&lt;p&gt;If we visit the same page(s) as before we can capture the same Fiddler statistics to get an idea of our cached content. If you look at the data below it looks as as if we have 20 times LESS data than before. So, in the naive approach we can transfer about 20 times the amount of page views when we have 100% return visitors. Here is an &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb250442(v=vs.85).aspx&quot;&gt;excellent MSDN article&lt;/a&gt; on HTTP performance using Fiddler; read it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Request Count:   17
Unique Hosts:    9
Bytes Sent:      15,501     (headers:15,501; body:0)
Bytes Received:  48,860     (headers:5,252; body:43,608)

ACTUAL PERFORMANCE
--------------
Requests started at:        17:03:17.465
Responses completed at:     17:03:19.177
Sequence (clock) duration:  00:00:01.7120980
Aggregate Session duration: 00:00:02.368
DNS Lookup time:            121ms
TCP/IP Connect duration:    876ms

RESPONSE CODES
--------------
HTTP/200:   14
HTTP/304:   3

RESPONSE BYTES (by Content-Type)
--------------
               text/html: 40,143
               ~headers~: 5,252
application/x-javascript: 2,978
         text/javascript: 401
               image/gif: 86
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the real world you won&amp;#39;t have that many return visitors. Depending on the type of requests you have (dynamic v. static) and what your business model is like (information or sales) you could be more in the camp of 30% to 50% return. You know your data best. I could offer some foolhardy estimates based on experience, but it would do you a disservice. Explore your data and know your numbers.&lt;/p&gt;

&lt;p&gt;Now, lets take this data and apply some fuzz to it and see what our effective rate at load would be.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;New users:
14 pages/sec * 60sec = 840pages/minute * 50% = 420

Return Users:
280 pages/sec * 60sec = 16800/minute * 50% = 8400

Total:
8820 pages per minute

Fuzzed number (80%):
7056 pages per minute
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, this number sounds more like a enterprise level application. But, it seems kind of high.&lt;/p&gt;

&lt;h3&gt;User Estimation&lt;/h3&gt;

&lt;p&gt;Our goal is to find out if we have enough bandwidth to support our day one user base. Here is an example of our test case:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actual Usage&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Normal Scenario

&lt;ul&gt;
&lt;li&gt; 5,000 Users &lt;/li&gt;
&lt;li&gt; 2 - 3 pages per session&lt;/li&gt;
&lt;li&gt; 3,000 sessions per minute&lt;/li&gt;
&lt;li&gt; 6,000 pages per minute&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt; Mobile

&lt;ul&gt;
&lt;li&gt; 500 Users&lt;/li&gt;
&lt;li&gt; 4 - 5 pages per session&lt;/li&gt;
&lt;li&gt; 1,000 session per minute&lt;/li&gt;
&lt;li&gt; 5,000 pages per minute&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Virtual Usage&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Normal Scenario

&lt;ul&gt;
&lt;li&gt; 1,000 virtual users&lt;/li&gt;
&lt;li&gt; 50% Return Visitors&lt;/li&gt;
&lt;li&gt; 3 - 5 pages per test&lt;/li&gt;
&lt;li&gt; 2,000 test per minute&lt;/li&gt;
&lt;li&gt; 6,000 pages per minute&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt; Mobile

&lt;ul&gt;
&lt;li&gt; 200 virtual users&lt;/li&gt;
&lt;li&gt; 40% Return Visitors&lt;/li&gt;
&lt;li&gt; 4 - 5 pages per test&lt;/li&gt;
&lt;li&gt; 1,000 tests per minute&lt;/li&gt;
&lt;li&gt; 4,000 pages per minute&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This test load simulated production traffic with less users than were reported on the site.  By sacrificing &amp;quot;actual&amp;quot; user load you can save some additional overhead of extraneous virtual users. This will come in handy later when you get to the bottom of the page.&lt;/p&gt;

&lt;h3&gt;Caution&lt;/h3&gt;

&lt;p&gt;We now have a page goal, and our possible load pattern. I urge you to exercise caution here. If you were keeping up and doing the math yourself you probably noticed were doing somewhere around 2,600 requests per second. Even at 260 requests/sec per server your looking at 10 servers serving this web site. Is that too many, is it not enough? &lt;/p&gt;

&lt;p&gt;Don&amp;#39;t get caught up in the theoretical maximums. It is in everyone&amp;#39;s best interest to test as often as you can. Especially when you suggest a change, no matter how small. When in doubt, look at my previous blog post &lt;a href=&quot;/2014/09/16/always-performance-test/&quot;&gt;Always Performance Test!&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Sanity Check&lt;/h3&gt;

&lt;p&gt;Now is the time to apply some best practices before you test. Before you go all out on an external test, here are some low hanging fruit that will improve your bandwidth.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Caching

&lt;ul&gt;
&lt;li&gt;Make use of the caching tab in Fiddler&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Static Resource Sizes

&lt;ul&gt;
&lt;li&gt;Images&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Page Sizes

&lt;ul&gt;
&lt;li&gt;Static&lt;/li&gt;
&lt;li&gt;Dynamic&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bundling

&lt;ul&gt;
&lt;li&gt;Most web frameworks have a package that will bundle and minify&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Minification

&lt;ul&gt;
&lt;li&gt;If you can&amp;#39;t bundle, you should minify&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Compression

&lt;ul&gt;
&lt;li&gt;Above all else you should compress&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Content Delivery Network

&lt;ul&gt;
&lt;li&gt;If all else fails, seriously consider this&lt;/li&gt;
&lt;li&gt;Some common libraries are CDN&amp;#39;d for free, like jQuery on Google for instance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Can We Test Now?!&lt;/h3&gt;

&lt;p&gt;Yes. Go ahead and start putting together a plan to test from the outside. &lt;/p&gt;

&lt;p&gt;It&amp;#39;s no secret that when you use a Microsoft product it will cost you. But, in this case, you can easily map out the amount of money you need to spend. I haven&amp;#39;t used any other services that integrate so well with a tool set I&amp;#39;m familiar with. VSO, provided a great platform to test on. I was even able to bring that data back into my local load test database. No I&amp;#39;m not some shill recommending random products. It was genuinely a pleasant experience and I highly recommend it.&lt;/p&gt;

&lt;p&gt;Knowing my goal allowed me to save a lot of money. The going rate for testing in the cloud at the time of this writing is $0.002 per user minute. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1000 virtual users x 30 minutes = 30,000 virtual user minutes * $0.002 = $60
5000 virtual users x 30 minutes = 150,000 virtual user minutes * $0.002 = $300
5000 virtual users x 60 minutes = 300,000 virtual user minutes * $0.002 = $600
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you can afford some bad response times at the beginning of your test you should attempt to shorten your ramp-up time. So, if your normal user load takes 2 hours to be at capacity you can try shortening that to 10 or 20 minutes on an internal load test and see how your system handles it. Once you confirm you can take that kind of hit you should alter your load test to match that. Next, if your test had normally run for a couple of hours, you should consider only running for 30 minutes. &lt;/p&gt;

&lt;p&gt;I know, I know. That is not a great amount of testing, but it all depends on what your goals are.  If you have tons of disposable cash then by all means crank up 10,000 users and have them sit idle for hours on end.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;We all know bandwidth costs money. But you can really save yourself a ton of &lt;strong&gt;actual&lt;/strong&gt; dollars, and you can greatly enhance your user experience. Some of the glamor in performance testing, if there is such a thing, is finding that critical bit of code that would have taken down the site. But, we should not neglect this very fundamental test metric.&lt;/p&gt;

&lt;p&gt;This wasn&amp;#39;t really meant as a tutorial but an overview of a process that may be skirted from time to time. It&amp;#39;s easy to forgo certain tests and skip over goals. Here are a few more links that will help out &lt;a href=&quot;https://developers.google.com/web/fundamentals/&quot;&gt;Web Fundamentals&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/speed/docs/insights/rules&quot;&gt;PageSpeed Insights&lt;/a&gt;, &lt;a href=&quot;https://developer.yahoo.com/performance/rules.html&quot;&gt;Yahoo Best Practices&lt;/a&gt;(a bit older but useful).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Always Performance Test!</title>
   <link href="//2014/09/16/always-performance-test/"/>
   <updated>2014-09-16T00:00:00-07:00</updated>
   <id>/2014/09/16/always-performance-test</id>
   <content type="html">&lt;p&gt;While thumbing through Twitter I ran across an &lt;a href=&quot;http://apmblog.compuware.com/2014/09/16/detecting-bad-deployments-resource-impact-response-time-hotspot-garbage-collection/&quot;&gt;article&lt;/a&gt; written by &lt;a href=&quot;https://twitter.com/grabnerandi&quot;&gt;@grabnerandi&lt;/a&gt; about a company not being able to load test a change for dependency injection. I can&amp;#39;t tell you how many times in my job that performance testing has been brushed over for speed to market.&lt;/p&gt;

&lt;p&gt;Look, I get it. &lt;strong&gt;Money&lt;/strong&gt;. There, I said it. Most of the time the driving factor for not doing something you should be disciplined about is the bottom line. While I get it I don&amp;#39;t like it. I have had to inject myself into a release process to be the harbinger of doom. I try not to get all &amp;quot;the sky is falling,&amp;quot; but in reality it could.&lt;/p&gt;

&lt;p&gt;I know, I know. &lt;strong&gt;Time&lt;/strong&gt;. Right after money, but usually goes hand-in-hand, is time. This excuse gets even the best of us. Does anyone have time? No. Do we do it anyway? Sometimes. I&amp;#39;d like to say that while being the performance testing and DevOps advocate that I just ooze availability. But, I don&amp;#39;t. Just like everyone else I have constraints.&lt;/p&gt;

&lt;p&gt;What does it mean? Money + Time = &lt;strong&gt;Effort&lt;/strong&gt;. It always comes down to effort. This is the way to merge both time and money into one shortsighted mess. The effort required to test is usually deemed greater than the effort to just put it in. This is the death bringer of many of once stable applications.&lt;/p&gt;

&lt;h2&gt;Story Time&lt;/h2&gt;

&lt;p&gt;A while ago our team was asked to performance test a new web application. We got our grubby little hands on it we shredded the code and the database layout. Only to be met with &amp;quot;No one runs it like that.&amp;quot; Apparently we were &amp;quot;no one.&amp;quot; As a good performance testing team we provided solutions to the problems and the application team would make sure they went in. &lt;/p&gt;

&lt;p&gt;Ever since then, just about every dot release (x.1, x.2, etc.) has been tested by our team. A lot of things change from version to version, but we now had enough experience with the style of the developers and could keep up with the changes. Each time we found one or two things, but we rarely had major problems like we did in the first few releases. Our performance results always came back with positive results.&lt;/p&gt;

&lt;p&gt;Fast forward about 2 years. Multiple major and minor releases have come and went without issue. The application team had requested a new feature a few months ago and it was now ready for deployment. The change was &amp;quot;small&amp;quot; and carried only a couple of new screens. &lt;em&gt;Our team never even heard about it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On go live, the applications started out fine but would always start performing poorly around 11am. This happened to be the peak time the application was used. A recycle would happen and the problem would go away for an hour and happen again. This process was repeated daily for a week. The application team was working with the vendor to find a solution.&lt;/p&gt;

&lt;p&gt;Our team got involved and we decided to take a look at what was going on. Since the application didn&amp;#39;t have any APM tools on it we went the traditional route and started monitoring performance counters. We went back in time and looked at the historical data. We could see that CPU was definitely becoming saturated. A bit deeper inspection into the .NET counters revealed that the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/x2tyfybc(v=vs.110).aspx&quot;&gt;# of Induced GC&lt;/a&gt; counter was going up at a steady rate.&lt;/p&gt;

&lt;p&gt;We compared the counters to a date just before the go-live and to no one&amp;#39;s surprise the issue was not there. We went back and performance tested the new application with existing scripts (we did not include the new screens) and the issue was still there. This showed there was something wrong in something else besides the proposed &amp;quot;only changes.&amp;quot;&lt;/p&gt;

&lt;p&gt;Luckily we had &lt;a href=&quot;http://www.compuware.com/en_us/application-performance-management.html&quot;&gt;dynaTrace&lt;/a&gt; at our disposal in our lower life cycle and we were able to quickly find the offending code. Analysis from the vendor showed a junior developer pulled from a previous branch that had a bug that was fixed long ago. A patch was issued that day by the vendor. We performance tested it. :)&lt;/p&gt;

&lt;h2&gt;Lesson&lt;/h2&gt;

&lt;h3&gt;Always Performance Test!&lt;/h3&gt;

&lt;p&gt;Considering all of the time, money, and effort (yes all three) wasted on: deploying bad code, end user impact, and time to resolution. It might have been quicker, easier, and cheaper to performance test this code.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re ever in a situation where one of these big three come up you should always make a statement, on record, about the need to performance test. If you are silent it&amp;#39;s not a great place to be if someone asks why it was never done. Being in DevOps you have just as much of a responsibility and burden to ensure application performance is as high as possible.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Writing code to write code</title>
   <link href="//2014/09/06/code-to-code/"/>
   <updated>2014-09-06T00:00:00-07:00</updated>
   <id>/2014/09/06/code-to-code</id>
   <content type="html">&lt;p&gt;Every now and then a balance needs to be struck from the every day coding of an application. While personal life is usually the topic for these types of posts, today that is not the case. Sometimes you have to write code in order to write code. This is somewhat of an extended rant from my previous post.&lt;/p&gt;

&lt;p&gt;While developing the core components of my &lt;a href=&quot;http://www.github.com/chainsapm&quot;&gt;ChainsAPM&lt;/a&gt; solution I felt the need to write down thoughts and musings of what I&amp;#39;m trying to do as well as explain some details of the implementation. Plus, I have other things to talk about aside from that project. At the same time I need to keep myself organized; so I needed to make a separate space.&lt;/p&gt;

&lt;p&gt;Behold, the humble blog. This has always been the best sounding board for getting ideas out there. While the normal blogging scene is great, there are a lot of gotchas and really some implementation details I don&amp;#39;t want to mess with. Places like Wordpress and blogger have excellent packages, software and templates. I have used these places before to bring to life some idea or useful tip. But, in all of this simplicity, lay a problem I never thought about. Once I signed up, I usually never signed back in once I wrote a couple of blogs.&lt;/p&gt;

&lt;p&gt;Part of the reason for this is beacause I never really used the software as it was intended. I didn&amp;#39;t connect with like minded bloggers, I didn&amp;#39;t share the pages and I was just overall uninterested in the process. I didn&amp;#39;t have much control over what the pages looked like unless I wanted to get into some Wordpress implementation details that I didn&amp;#39;t need.&lt;/p&gt;

&lt;p&gt;GitHub provides a very minimalistic blogging infrastructure based on Jekyll (which was written at GitHub). It&amp;#39;s a Ruby implemented web server that uses simple templating to make static content. Once you compile the Jekyll site you can publish it anywhere and not require any databases or other silly things just to deliver content.&lt;/p&gt;

&lt;p&gt;But, going this route meant I had to learn &lt;strong&gt;YET ANOTHER&lt;/strong&gt; thing in order to get some words on the internets. It&amp;#39;s starting to feel like Wordpress all over again. But, this time I have a vested interest because it&amp;#39;s somewhat of a unified front. I&amp;#39;m developing my blog site in my normal IDE using familiar tools and publishing to a place that I visit every day.&lt;/p&gt;

&lt;p&gt;So instead of just sluffing off the task I decided to learn this new-to-me skill because it was also more robust and allowed me to do things that would be difficult at best and impossible overall to implement. I am now able to combine efforts and cross post to my two blogs. &lt;/p&gt;

&lt;p&gt;After plowing through a month of coding in C++ I found myself wanting something a bit prettier, something that I could craft a bit more organically and not stress about all of the implementation details. In other words, I had to write this code in order to write other code.&lt;/p&gt;
</content>
 </entry>
 

</feed>
